public class Solution {
    public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> A) {
        ArrayList<ArrayList<Integer>> permutations = new ArrayList<ArrayList<Integer>>();
        buildPermutations(new ArrayList<Integer>(), A, permutations);
        return permutations;
    }
    
    private void buildPermutations(ArrayList<Integer> perm, ArrayList<Integer> remaining, ArrayList<ArrayList<Integer>> permutations) {
        if (remaining.size() == 0) {
            permutations.add(perm);
        }
        Set<Integer> uniqueRemaining = new HashSet<Integer>(remaining);
        for (Integer i : uniqueRemaining) {
            ArrayList<Integer> updatedRemaining = new ArrayList<Integer>();
            updatedRemaining.addAll(remaining);
            updatedRemaining.remove(i);
            ArrayList<Integer> updatedPerm =  new ArrayList<Integer>();
            updatedPerm.addAll(perm);
            updatedPerm.add(i);
            buildPermutations(updatedPerm, updatedRemaining, permutations);
        }
    }
    
}
